module alu (
    input clk,  // clock
    input rst,  // reset
    input a[16],
    input b[16],
    input alufn[6],
    output out[16]
    //output seg_out[8],
    //output sel_out[4]
  ) {
  
  sig actual_output[16];  // temporary variables
  sig temp_a;
  sig temp_b;
  // ALU MODULES
  sixteen_bit_adder alu_adder;
  sixteen_bit_boolean alu_boole;
  comparator alu_cmp;
  shifter alu_shift; 
  multiplier alu_mul;
  
  
  .clk(clk), .rst(rst) {
  }

  always {
    // INITIALIZE ALU MODULE INPUTS
    
    alu_adder.x = b0;
    alu_adder.y = b0;
    alu_adder.cin = b0;
    
    alu_boole.a = b0;
    alu_boole.b = b0;
    alu_boole.alufn = b0;
    
    alu_cmp.v = b0;
    alu_cmp.z = b0;
    alu_cmp.n = b0;
    alu_cmp.alufn = b0;
    
    alu_shift.a = b0;
    alu_shift.b = b0;
    alu_shift.alufn = b0;
    
    alu_mul.a = b0;
    alu_mul.b = b0;
    
    // INITIALIZE TESTING MODE MODULE INPUT
   
   
    // INITIALIZE TEMPORARY VARIABLES
    actual_output = 16b0000000000000000;
    
    //REMOVED error and auto testing, ALU will now only output 16bits of output from given a, b, alufn code
    
    // SELECTING WHICH ALU MODULE OUTPUT TO USE USING ALUFN[5:4]
    case (alufn[5:4]) {
      b00:  // ADDER/MULTIPLIER
       // ADD: 000000; SUB: 000001; MUL: 000010; check_msb: 000011;
      if (alufn[3:1] == b000) {
                  // setting input
          alu_adder.x = a;
          alu_adder.y = b;
          alu_adder.cin = alufn[0];
          // setting output  
          actual_output = alu_adder.s;
        
      } 
      else if (alufn[3:0] == b0010) {
          alu_mul.a = a;
          alu_mul.b = b;
          // setting output  
          actual_output = alu_mul.out;
      }
        else if(alufn[3:0] == b0011){ //custom operator to check for MSB 
          temp_a = a^b; //a XOR b
          temp_b = a&b; //a AND b 
          actual_output = (temp_a <= temp_b);
        }
                 
      b01:  // BOOLEAN
        // A: 011010; XOR: 010110; OR: 011110; AND: 011000; NOTA:010101; B:011100; NOTB: 010011; NAND: 010111; NOR: 010001; NXOR: 011001;
        if (alufn[3:0] == b1010 || alufn[3:0] == b0110 || alufn[3:0] == b1110 || alufn[3:0] == b1000 || alufn[3:0] == b0101||alufn[3:0] == b1100 || alufn[3:0] == b0011 || alufn[3:0] == b0111 || alufn[3:0] == b0001 || alufn[3:0] == b1001) {
            // setting input
            alu_boole.a = a;
            alu_boole.b = b;
            alu_boole.alufn = alufn[3:0];
            // setting output  
            actual_output = alu_boole.out;
        }
        
      b10:  // SHIFTER
       // SHL: 100000; SHR: 100001; SRA: 100011
        if (alufn[3:2] == b00 && alufn[1:0] != b10) {
            // setting input
            alu_shift.a = a;
            alu_shift.b = b;
            alu_shift.alufn = alufn;
            // setting output  
            actual_output = alu_shift.s;
        }
        
        
      b11:  // COMPARATOR
        // CMPEQ: 110011; CMPLT: 110101; CMPLE: 110111
        if (alufn[3:0] == b0011 || alufn[3:0] == b0101 || alufn[3:0] == b0111){
            // setting adder input
            alu_adder.x = a;
            alu_adder.y = b;
            alu_adder.cin = alufn[0];
            
            // setting Z, V, N output from adder as input to comparator
            alu_cmp.z = alu_adder.z;
            alu_cmp.v = alu_adder.v;
            alu_cmp.n = alu_adder.n;
            
            // setting ALUFN input to comparator
            alu_cmp.alufn = alufn[2:1];

            // setting output  
            actual_output = alu_cmp.out;
        }
        
    }
    out = actual_output;
  }
}
