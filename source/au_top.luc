module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal


  .clk(clk) {
    game_beta gameMachine(.rst(rst));
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    rand_increment random(.rst(rst));
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    usb_tx = usb_rx;        // echo the serial data
    
    gameMachine.random_input = random.out;
    gameMachine.red_btn_input = 0;
    gameMachine.green_btn_input = 0;
    gameMachine.blue_btn_input = 0;
    
    io_led[1][1:0] = random.out;
    io_led[2][7:0] = gameMachine.debug_out[9:3];
    io_led[1][7:5] = gameMachine.debug_out[2:0];
  }
}