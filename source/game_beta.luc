module game_beta (
    input clk,  // clock
    input rst,  // reset
    input red_btn_input,
    input green_btn_input,
    input blue_btn_input,
    input random_input[2],
    
    output debug_out[10],
    output timer_out[10]

  ) {
  
  sig inputAlu_a[10];
  sig inputAlu_b[10];

  sig current_pointer[10];
  sig rand_tenbits[10];
  
  //setup slow clock as input,one difficulty for now
 
  .clk(clk){

    edge_detector clock_detector(#RISE(1),#FALL(0));
    //edge_detector button_detector[3](#RISE(1),#FALL(0));    
  
    .rst(rst){
      
      alu game_alu;
      control_unit game_controlunit;
      regfile players;
      counter slow_timer(#SIZE(1),#DIV(26));
      }
    }

  always {
    debug_out = 0;
    timer_out = 0;
    inputAlu_a = 0;
    inputAlu_b = 0;
    rand_tenbits = 0;
    current_pointer = players.pointer_out;
    clock_detector.in = slow_timer.value;
    
    //initialize WE for regfile
    players.write_enable = game_controlunit.we_regfile;
    players.write_address = game_controlunit.regfile_write_address;
    
    //read address A and B
    players.read_address_1 = game_controlunit.regfile_read_address_a;
    players.read_address_2 = game_controlunit.regfile_read_address_b;
    
    //bootstrap Ra & Rb data straight to FSM
    game_controlunit.ra_data = players.ra_out;
    game_controlunit.rb_data = players.rb_out;
    
    //increase slow_clock each time 
    game_controlunit.slow_clock_in = clock_detector.out;
    
    //red_btn_input
    game_controlunit.red_btn_input = red_btn_input;
    
    //green_btn_input
    game_controlunit.green_btn_input = green_btn_input;
    
    //blue_btn_input
    game_controlunit.blue_btn_input = blue_btn_input;
    
    //random input converted into 10 bits
    if(random_input == b00){
      rand_tenbits = b0000000000;
      }
    else if(random_input == b01){
      rand_tenbits = b0000000001;
      }
    else if(random_input == b10){
      rand_tenbits = b0000000010;
      }
    else if(random_input == b11){
      rand_tenbits = b0000000011;
      }
    
    case(game_controlunit.asel){
        b000: inputAlu_a = players.read_data_1; //reading Ra input
        b001: inputAlu_a = b1; //user input always 1, is just selecting which register(R0,R1,R2) to compare to 
        b010: inputAlu_a = b0000000001; //1 in binary 10 bits
        b011: inputAlu_a = b0000001010; //10 in binary 10 bits
        b100: inputAlu_a = b0000011110; //30 in binary 10 bits
        b101: inputAlu_a = b0000111100; //60 in binary 10 bits
      }
    
    case(game_controlunit.bsel){
      b000: inputAlu_b = players.read_data_2; //reading Rb input
      b001: inputAlu_b = rand_tenbits; //reading random number
      b010: inputAlu_b = b0000000000; //0 in binary 10 bits
      b011: inputAlu_b = b0000000001; //1 in binary 10 bits
      b100: inputAlu_b = b0000000010; //2 in binary 10 bits
      b101: inputAlu_b = b0000000011; //3 in binary 10 bits
      b110: inputAlu_b = b0000001010; //10 in binary 10 bits
      }
    //ALU check
    //Using 16 bits ALU
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn = game_controlunit.alufn; //outputs of ALU here
    
    case (game_controlunit.wdsel){
      b1: players.write_data = game_alu.out; //selecting ALU output
      b0: players.write_data = b0; //only in event of reset
      default: players.write_data = game_alu.out;
      }
      
    debug_out = rand_tenbits;
  }
}
