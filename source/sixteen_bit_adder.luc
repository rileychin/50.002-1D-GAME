module sixteen_bit_adder (
    input x[16],
    input y[16],
    input cin,    // alufn[0] - denotes ADD (cin=0) or SUB (cin=1) operation
    output s[16],
    output cout,
    output z,
    output n,
    output v
  ) {

  sig y_prime[16];
  adder fulladder[16];
  
  always {
    fulladder.x = x;
    y_prime = y ^ 16x{cin};  // invert 16 bits of y if alufn[0] = 1 (SUB)
    fulladder.y = y_prime;
    fulladder.cin[0] = cin;  // assigning alufn[0] to cin of the full adder of the LSB
    fulladder.cin[15:1] = fulladder.cout[14:0];  // assigning cout of the previous full adder to the cin of the next full adder
    
    // 16 bit output from full adders
    s = fulladder.s;
    cout = fulladder.cout[15];
    
    // calculating z, v and n using output of the full adder
    // to be used for the comparator unit 
    n = fulladder.s[15];    // n = 1 if 16 bit FA sum output is negative (ie. MSB=1)
    if (~|fulladder.s) {    // condition checks for whether FA sum output is all zero
      z = b1;               // NOR all 16 bits of sum output => only returns 1 if all bits are zero
    } else {                
      z = b0;
    }
    // v = 1 if overflow occurs
    // checks to make sure x and y input to the full adders are the same sign, 
    // and that the sign of the output is different from the signs of the input
    v = (x[15] & y_prime[15] & ~fulladder.s[15]) | (~x[15] & ~y_prime[15] & fulladder.s[15]);
    
  }
}
