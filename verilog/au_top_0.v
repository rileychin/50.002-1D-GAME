/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [10-1:0] M_gameMachine_debug_out;
  wire [10-1:0] M_gameMachine_debug_out_2;
  reg [1-1:0] M_gameMachine_red_btn_input;
  reg [1-1:0] M_gameMachine_green_btn_input;
  reg [1-1:0] M_gameMachine_blue_btn_input;
  reg [2-1:0] M_gameMachine_random_input;
  reg [1-1:0] M_gameMachine_score_10;
  reg [1-1:0] M_gameMachine_score_30;
  reg [1-1:0] M_gameMachine_score_60;
  game_beta_1 gameMachine (
    .clk(clk),
    .rst(rst),
    .red_btn_input(M_gameMachine_red_btn_input),
    .green_btn_input(M_gameMachine_green_btn_input),
    .blue_btn_input(M_gameMachine_blue_btn_input),
    .random_input(M_gameMachine_random_input),
    .score_10(M_gameMachine_score_10),
    .score_30(M_gameMachine_score_30),
    .score_60(M_gameMachine_score_60),
    .debug_out(M_gameMachine_debug_out),
    .debug_out_2(M_gameMachine_debug_out_2)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [2-1:0] M_random_out;
  rand_increment_3 random (
    .clk(clk),
    .rst(rst),
    .out(M_random_out)
  );
  wire [(3'h4+0)-1:0] M_buttoncond_out;
  reg [(3'h4+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h4;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_4 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h4+0)-1:0] M_buttondetector_out;
  reg [(3'h4+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h4;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_5 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    usb_tx = usb_rx;
    M_gameMachine_random_input = M_random_out;
    M_gameMachine_red_btn_input = 1'h0;
    M_gameMachine_green_btn_input = 1'h0;
    M_gameMachine_blue_btn_input = 1'h0;
    M_buttoncond_in[0+0-:1] = io_button[0+0-:1];
    M_buttondetector_in[0+0-:1] = M_buttoncond_out[0+0-:1];
    M_gameMachine_score_10 = M_buttondetector_out[0+0-:1];
    M_buttoncond_in[1+0-:1] = io_button[1+0-:1];
    M_buttondetector_in[1+0-:1] = M_buttoncond_out[1+0-:1];
    M_gameMachine_score_30 = M_buttondetector_out[1+0-:1];
    M_buttoncond_in[2+0-:1] = io_button[2+0-:1];
    M_buttondetector_in[2+0-:1] = M_buttoncond_out[2+0-:1];
    M_gameMachine_score_60 = M_buttondetector_out[2+0-:1];
    io_led[8+0+1-:2] = M_random_out;
    io_led[16+0+7-:8] = M_gameMachine_debug_out[2+7-:8];
    io_led[8+6+1-:2] = M_gameMachine_debug_out[0+1-:2];
    io_led[0+7-:8] = M_gameMachine_debug_out_2;
  end
endmodule
