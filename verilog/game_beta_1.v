/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_beta_1 (
    input clk,
    input rst,
    input red_btn_input,
    input green_btn_input,
    input blue_btn_input,
    input [1:0] random_input,
    input score_10,
    input score_30,
    input score_60,
    output reg [9:0] debug_out,
    output reg [9:0] debug_out_2
  );
  
  
  
  reg [9:0] inputAlu_a;
  
  reg [9:0] inputAlu_b;
  
  reg [9:0] current_pointer;
  
  reg [9:0] rand_tenbits;
  
  wire [1-1:0] M_clock_detector_out;
  reg [1-1:0] M_clock_detector_in;
  edge_detector_5 clock_detector (
    .clk(clk),
    .in(M_clock_detector_in),
    .out(M_clock_detector_out)
  );
  wire [16-1:0] M_game_alu_out;
  reg [16-1:0] M_game_alu_a;
  reg [16-1:0] M_game_alu_b;
  reg [6-1:0] M_game_alu_alufn;
  alu_6 game_alu (
    .clk(clk),
    .rst(rst),
    .a(M_game_alu_a),
    .b(M_game_alu_b),
    .alufn(M_game_alu_alufn),
    .out(M_game_alu_out)
  );
  wire [10-1:0] M_game_controlunit_red_bits_generated;
  wire [10-1:0] M_game_controlunit_green_bits_generated;
  wire [10-1:0] M_game_controlunit_blue_bits_generated;
  wire [2-1:0] M_game_controlunit_rand_output;
  wire [10-1:0] M_game_controlunit_user_output;
  wire [6-1:0] M_game_controlunit_current_state;
  wire [6-1:0] M_game_controlunit_alufn;
  wire [3-1:0] M_game_controlunit_asel;
  wire [3-1:0] M_game_controlunit_bsel;
  wire [3-1:0] M_game_controlunit_regfile_write_address;
  wire [3-1:0] M_game_controlunit_regfile_read_address_a;
  wire [3-1:0] M_game_controlunit_regfile_read_address_b;
  wire [1-1:0] M_game_controlunit_we_regfile;
  wire [1-1:0] M_game_controlunit_wdsel;
  reg [1-1:0] M_game_controlunit_red_btn_input;
  reg [1-1:0] M_game_controlunit_green_btn_input;
  reg [1-1:0] M_game_controlunit_blue_btn_input;
  reg [10-1:0] M_game_controlunit_rb_data;
  reg [10-1:0] M_game_controlunit_ra_data;
  reg [1-1:0] M_game_controlunit_slow_clock_in;
  reg [1-1:0] M_game_controlunit_score_simulate;
  control_unit_7 game_controlunit (
    .clk(clk),
    .rst(rst),
    .red_btn_input(M_game_controlunit_red_btn_input),
    .green_btn_input(M_game_controlunit_green_btn_input),
    .blue_btn_input(M_game_controlunit_blue_btn_input),
    .rb_data(M_game_controlunit_rb_data),
    .ra_data(M_game_controlunit_ra_data),
    .slow_clock_in(M_game_controlunit_slow_clock_in),
    .score_simulate(M_game_controlunit_score_simulate),
    .red_bits_generated(M_game_controlunit_red_bits_generated),
    .green_bits_generated(M_game_controlunit_green_bits_generated),
    .blue_bits_generated(M_game_controlunit_blue_bits_generated),
    .rand_output(M_game_controlunit_rand_output),
    .user_output(M_game_controlunit_user_output),
    .current_state(M_game_controlunit_current_state),
    .alufn(M_game_controlunit_alufn),
    .asel(M_game_controlunit_asel),
    .bsel(M_game_controlunit_bsel),
    .regfile_write_address(M_game_controlunit_regfile_write_address),
    .regfile_read_address_a(M_game_controlunit_regfile_read_address_a),
    .regfile_read_address_b(M_game_controlunit_regfile_read_address_b),
    .we_regfile(M_game_controlunit_we_regfile),
    .wdsel(M_game_controlunit_wdsel)
  );
  wire [10-1:0] M_players_read_data_1;
  wire [10-1:0] M_players_read_data_2;
  wire [10-1:0] M_players_pointer_out;
  wire [10-1:0] M_players_row_red_out;
  wire [10-1:0] M_players_row_green_out;
  wire [10-1:0] M_players_row_blue_out;
  wire [10-1:0] M_players_rand_register_out;
  wire [10-1:0] M_players_current_timer_out;
  wire [10-1:0] M_players_ra_out;
  wire [10-1:0] M_players_rb_out;
  reg [3-1:0] M_players_read_address_1;
  reg [3-1:0] M_players_read_address_2;
  reg [3-1:0] M_players_write_address;
  reg [10-1:0] M_players_write_data;
  reg [1-1:0] M_players_write_enable;
  reg [1-1:0] M_players_score_in;
  reg [10-1:0] M_players_score;
  regfile_8 players (
    .clk(clk),
    .rst(rst),
    .read_address_1(M_players_read_address_1),
    .read_address_2(M_players_read_address_2),
    .write_address(M_players_write_address),
    .write_data(M_players_write_data),
    .write_enable(M_players_write_enable),
    .score_in(M_players_score_in),
    .score(M_players_score),
    .read_data_1(M_players_read_data_1),
    .read_data_2(M_players_read_data_2),
    .pointer_out(M_players_pointer_out),
    .row_red_out(M_players_row_red_out),
    .row_green_out(M_players_row_green_out),
    .row_blue_out(M_players_row_blue_out),
    .rand_register_out(M_players_rand_register_out),
    .current_timer_out(M_players_current_timer_out),
    .ra_out(M_players_ra_out),
    .rb_out(M_players_rb_out)
  );
  wire [1-1:0] M_slow_timer_0_value;
  counter_9 slow_timer_0 (
    .clk(clk),
    .rst(rst),
    .value(M_slow_timer_0_value)
  );
  wire [1-1:0] M_slow_timer_1_value;
  counter_10 slow_timer_1 (
    .clk(clk),
    .rst(rst),
    .value(M_slow_timer_1_value)
  );
  wire [1-1:0] M_slow_timer_2_value;
  counter_11 slow_timer_2 (
    .clk(clk),
    .rst(rst),
    .value(M_slow_timer_2_value)
  );
  wire [1-1:0] M_slow_timer_3_value;
  counter_12 slow_timer_3 (
    .clk(clk),
    .rst(rst),
    .value(M_slow_timer_3_value)
  );
  
  always @* begin
    inputAlu_a = 1'h0;
    inputAlu_b = 1'h0;
    rand_tenbits = 1'h0;
    M_players_score = 1'h0;
    M_players_score_in = 1'h0;
    M_game_controlunit_score_simulate = 1'h0;
    if (score_10) begin
      M_players_score = 10'h00a;
      M_players_score_in = 1'h1;
      M_game_controlunit_score_simulate = 1'h1;
    end else begin
      if (score_30) begin
        M_players_score = 10'h01e;
        M_players_score_in = 1'h1;
        M_game_controlunit_score_simulate = 1'h1;
      end else begin
        if (score_60) begin
          M_players_score = 10'h03c;
          M_players_score_in = 1'h1;
          M_game_controlunit_score_simulate = 1'h1;
        end
      end
    end
    M_clock_detector_in = 1'h0;
    M_game_controlunit_slow_clock_in = 1'h0;
    M_players_write_enable = M_game_controlunit_we_regfile;
    M_players_write_address = M_game_controlunit_regfile_write_address;
    M_players_read_address_1 = M_game_controlunit_regfile_read_address_a;
    M_players_read_address_2 = M_game_controlunit_regfile_read_address_b;
    M_game_controlunit_ra_data = M_players_ra_out;
    M_game_controlunit_rb_data = M_players_rb_out;
    M_game_controlunit_red_btn_input = red_btn_input;
    M_game_controlunit_green_btn_input = green_btn_input;
    M_game_controlunit_blue_btn_input = blue_btn_input;
    current_pointer = M_players_pointer_out;
    if (random_input == 2'h0) begin
      rand_tenbits = 10'h004;
    end else begin
      if (random_input == 2'h1) begin
        rand_tenbits = 10'h009;
      end else begin
        if (random_input == 2'h2) begin
          rand_tenbits = 10'h012;
        end else begin
          if (random_input == 2'h3) begin
            rand_tenbits = 10'h003;
          end
        end
      end
    end
    if (M_players_current_timer_out[0+1-:2] == 2'h0) begin
      M_clock_detector_in = M_slow_timer_0_value;
      M_game_controlunit_slow_clock_in = M_clock_detector_out;
    end else begin
      if (M_players_current_timer_out[0+1-:2] == 2'h1) begin
        M_clock_detector_in = M_slow_timer_1_value;
        M_game_controlunit_slow_clock_in = M_clock_detector_out;
      end else begin
        if (M_players_current_timer_out[0+1-:2] == 2'h2) begin
          M_clock_detector_in = M_slow_timer_2_value;
          M_game_controlunit_slow_clock_in = M_clock_detector_out;
        end else begin
          M_clock_detector_in = M_slow_timer_3_value;
          M_game_controlunit_slow_clock_in = M_clock_detector_out;
        end
      end
    end
    
    case (M_game_controlunit_asel)
      3'h0: begin
        inputAlu_a = M_players_read_data_1;
      end
      3'h1: begin
        inputAlu_a = 1'h1;
      end
      3'h2: begin
        inputAlu_a = 10'h001;
      end
      3'h3: begin
        inputAlu_a = 10'h00a;
      end
      3'h4: begin
        inputAlu_a = 10'h01e;
      end
      3'h5: begin
        inputAlu_a = 10'h03c;
      end
      3'h6: begin
        inputAlu_a = 10'h000;
      end
    endcase
    
    case (M_game_controlunit_bsel)
      3'h0: begin
        inputAlu_b = M_players_read_data_2;
      end
      3'h1: begin
        inputAlu_b = rand_tenbits;
      end
      3'h2: begin
        inputAlu_b = 10'h000;
      end
      3'h3: begin
        inputAlu_b = 10'h001;
      end
      3'h4: begin
        inputAlu_b = 10'h002;
      end
      3'h5: begin
        inputAlu_b = 10'h003;
      end
      3'h6: begin
        inputAlu_b = 10'h00a;
      end
    endcase
    M_game_alu_a = inputAlu_a;
    M_game_alu_b = inputAlu_b;
    M_game_alu_alufn = M_game_controlunit_alufn;
    
    case (M_game_controlunit_wdsel)
      1'h1: begin
        M_players_write_data = M_game_alu_out;
      end
      1'h0: begin
        M_players_write_data = 1'h0;
      end
      default: begin
        M_players_write_data = M_game_alu_out;
      end
    endcase
    debug_out = M_players_current_timer_out;
    debug_out_2 = M_players_row_red_out;
  end
endmodule
