/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module multiplier_26 (
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out
  );
  
  
  
  wire [(5'h10+0)*(5'h10+0)-1:0] M_fa_s;
  wire [(5'h10+0)*(5'h10+0)-1:0] M_fa_cout;
  reg [(5'h10+0)*(5'h10+0)-1:0] M_fa_x;
  reg [(5'h10+0)*(5'h10+0)-1:0] M_fa_y;
  reg [(5'h10+0)*(5'h10+0)-1:0] M_fa_cin;
  
  genvar GEN_fa0, GEN_fa1;
  generate
  for (GEN_fa0=0;GEN_fa0<5'h10;GEN_fa0=GEN_fa0+1) begin: fa_gen_0
    for (GEN_fa1=0;GEN_fa1<5'h10;GEN_fa1=GEN_fa1+1) begin: fa_gen_1
      adder_27 fa (
        .x(M_fa_x[GEN_fa0*(5'h10)*(1)+GEN_fa1*(1)+(1)-1-:(1)]),
        .y(M_fa_y[GEN_fa0*(5'h10)*(1)+GEN_fa1*(1)+(1)-1-:(1)]),
        .cin(M_fa_cin[GEN_fa0*(5'h10)*(1)+GEN_fa1*(1)+(1)-1-:(1)]),
        .s(M_fa_s[GEN_fa0*(5'h10)*(1)+GEN_fa1*(1)+(1)-1-:(1)]),
        .cout(M_fa_cout[GEN_fa0*(5'h10)*(1)+GEN_fa1*(1)+(1)-1-:(1)])
      );
    end
  end
  endgenerate
  
  reg [255:0] ab;
  
  integer i;
  integer j;
  
  always @* begin
    out = 1'h0;
    out[0+0-:1] = a[0+0-:1] & b[0+0-:1];
    M_fa_x[0+15-:16] = 1'h0;
    for (i = 1'h0; i < 5'h10; i = i + 1) begin
      ab[(i)*16+15-:16] = 1'h0;
      for (j = 1'h0; j < 5'h10; j = j + 1) begin
        if (i + j < 5'h10) begin
          ab[(i)*16+(j + i)*1+0-:1] = a[(j)*1+0-:1] & b[(i)*1+0-:1];
        end
        if (i > 1'h0 && j >= i) begin
          M_fa_x[(i)*16+(j)*1+0-:1] = ab[(i)*16+(j)*1+0-:1];
          if (i == 1'h1) begin
            M_fa_y[(i)*16+(j)*1+0-:1] = ab[(i - 1'h1)*16+(j)*1+0-:1];
          end else begin
            M_fa_y[(i)*16+(j)*1+0-:1] = M_fa_s[(i - 1'h1)*16+(j)*1+0-:1];
          end
          if (j == i) begin
            M_fa_cin[(i)*16+(j)*1+0-:1] = 1'h0;
            out[(i)*1+0-:1] = M_fa_s[(i)*16+(j)*1+0-:1];
          end else begin
            M_fa_cin[(i)*16+(j)*1+0-:1] = M_fa_cout[(i)*16+(j - 1'h1)*1+0-:1];
          end
        end
      end
    end
  end
endmodule
